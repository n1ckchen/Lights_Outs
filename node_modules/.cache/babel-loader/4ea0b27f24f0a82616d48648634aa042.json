{"ast":null,"code":"var _jsxFileName = \"/Users/nickc/SpringBoard/react/exercies/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n  }\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell)); // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n\n      const boardCopy = oldBoard.map(row => [...row]);\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      return boardCopy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  } // TODO\n  // make table board\n  // TODO\n\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this));\n    }\n\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/nickc/SpringBoard/react/exercies/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","tblBoard","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    \n  }\n\n  function hasWon() {\n    return board.every((row) => row.every((cell) => !cell));\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n\n      const boardCopy = oldBoard.map((row) => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}